{"version":3,"sources":["../../node_modules/uuid/dist/esm-browser/rng.js","../../src/components/Icon/index.tsx","../../src/components/OpenApiRenderer/Servers/index.tsx","../../src/components/OpenApiRenderer/Header/index.tsx","../../node_modules/uuid/dist/esm-browser/regex.js","../../node_modules/uuid/dist/esm-browser/validate.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/components/OpenApiRenderer/utils.tsx","../../src/models/OpenApi.ts","../../src/components/Accordion/index.tsx","../../src/components/OpenApiRenderer/PathHeader/index.tsx","../../src/components/OpenApiRenderer/Required/index.tsx","../../src/components/OpenApiRenderer/PathContent/Parameters.tsx","../../src/components/OpenApiRenderer/Properties/index.tsx","../../src/components/OpenApiRenderer/Content/index.tsx","../../src/components/OpenApiRenderer/PathContent/RequestBody.tsx","../../src/components/OpenApiRenderer/PathContent/Responses.tsx","../../src/components/OpenApiRenderer/PathContent/index.tsx","../../src/components/OpenApiRenderer/Paths/index.tsx","../../src/components/OpenApiRenderer/Components/index.tsx","../../src/components/OpenApiRenderer/index.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["getRandomValues","icons","private","d","copy","Icon","color","size","className","fill","viewBox","xmlns","width","height","Servers","servers","React","s","key","url","type","onClick","text","navigator","name","Header","openApiVersion","info","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","v4","options","buf","offset","rnds","random","arr","arguments","length","undefined","toLowerCase","TypeError","stringify","groupPathsByTags","paths","Object","pathname","method","unifyPaths","curr","tag","acc","getComponent","refPath","splitPath","schemaType","schemaObject","components","Accordion","items","id","content","uuidv4","MethodClassnames","PathHeader","summary","backgroundClass","deprecated","styles","Required","showTitle","Parameters","parameters","p","isArray","required","style","letterSpacing","fontSize","item","Properties","subType","getBracket","propertyType","start","end","properties","isCompositeProperty","property","isLast","index","props","component","getProperties","renderSimpleProperty","stringStyle","Date","getPropertyValue","Content","schema","renderCardContent","RequestBody","requestBody","title","value","Responses","response","PathContent","deprecatedStyle","opacity","responses","Paths","pathsByTags","tagName","tags","t","getTag","pathGroups","heading","Components","propertyName","propertyInfo","securitySchema","flowName","flow","scopeName","OpenApiRenderer","specification","openapi","App","padding","specificationMock","ReactDOM","render","document","getElementById"],"mappings":"s5UAGIA,E,8CCDEC,EAAQ,CACZC,QACE,0BAAMC,EAAE,sOAEVC,KACE,0BAAMD,EAAE,qI,SAWYE,E,GAAK,iBAE3BC,aAF2B,sBAG3BC,YAH2B,eAI3BC,iBAJ2B,MAIf,GAJe,EAM3B,OACE,yBACEC,KAAMH,EACNI,QAAQ,YACRC,MAAM,6BACNC,MAAK,UAAKL,EAAL,MACLM,OAAM,UAAKN,EAAL,MACNC,UAAWA,GAEVP,EATL,I,SCfsBa,E,GAAQ,IAAEC,EAAF,EAAEA,QAChC,MACE,YAMF,OACE,6BACEC,4BADF,WAEE,wBAAIR,UAAU,cACXO,OAAaE,YAAD,OACX,wBACET,UAAU,oEACVU,IAAKD,EAAEE,KAEPH,8BACGC,yBAAoBA,EADvBD,YACGC,KADHD,IAC0CC,EAL5C,KAOE,4BACEG,KAAK,SACLZ,UAAU,yBACVa,QAAS,kBAnBAC,EAmBkBL,EAAD,SAlBpCM,iCADmBD,QAqBT,qBAAME,KAAK,OAAOlB,MAAM,QAAQC,KAAM,Y,SCvB5BkB,E,GAAO,yBAAiBC,EAAjB,EAAiBA,eAC9C,OACE,6BACE,yBAAKlB,UAAU,kCACbQ,4BAAKW,EADP,OAEE,8BACE,2BAAOnB,UAAU,sBAAjB,YAAgDmB,EADlD,SAEE,2BAAOnB,UAAU,yBAAjB,YALN,KAUEQ,2BAAIW,EAVN,aAWE,yBAAKnB,UAAU,QACb,qBAASO,QAASA,MHrB1B,IAAIa,EAAQ,IAAIC,WAAW,IACZ,SAASC,IAEtB,IAAK9B,KAGHA,EAAoC,qBAAX+B,QAA0BA,OAAO/B,iBAAmB+B,OAAO/B,gBAAgBgC,KAAKD,SAA+B,qBAAbE,UAAgE,oBAA7BA,SAASjC,iBAAkCiC,SAASjC,gBAAgBgC,KAAKC,WAGrO,MAAM,IAAIC,MAAM,4GAIpB,OAAOlC,EAAgB4B,GIjBzB,MAAe,sHCEf,SAASO,EAASC,GAChB,MAAuB,kBAATA,GAAqBC,EAAMC,KAAKF,GCKhD,IAFA,IAAIG,EAAY,GAEPC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,OAAO,ICNjD,SAASC,EAAGC,EAASC,EAAKC,GAExB,IAAIC,GADJH,EAAUA,GAAW,IACFI,SAAWJ,EAAQf,KAAOA,KAK7C,GAHAkB,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBF,EAAK,CACPC,EAASA,GAAU,EAEnB,IAAK,IAAIP,EAAI,EAAGA,EAAI,KAAMA,EACxBM,EAAIC,EAASP,GAAKQ,EAAKR,GAGzB,OAAOM,EAGT,ODRF,SAAmBI,GACjB,IAAIH,EAASI,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,EAG7Ef,GAAQG,EAAUW,EAAIH,EAAS,IAAMR,EAAUW,EAAIH,EAAS,IAAMR,EAAUW,EAAIH,EAAS,IAAMR,EAAUW,EAAIH,EAAS,IAAM,IAAMR,EAAUW,EAAIH,EAAS,IAAMR,EAAUW,EAAIH,EAAS,IAAM,IAAMR,EAAUW,EAAIH,EAAS,IAAMR,EAAUW,EAAIH,EAAS,IAAM,IAAMR,EAAUW,EAAIH,EAAS,IAAMR,EAAUW,EAAIH,EAAS,IAAM,IAAMR,EAAUW,EAAIH,EAAS,KAAOR,EAAUW,EAAIH,EAAS,KAAOR,EAAUW,EAAIH,EAAS,KAAOR,EAAUW,EAAIH,EAAS,KAAOR,EAAUW,EAAIH,EAAS,KAAOR,EAAUW,EAAIH,EAAS,MAAMO,cAMzf,IAAKnB,EAASC,GACZ,MAAMmB,UAAU,+BAGlB,OAAOnB,ECNAoB,CAAUR,GCjBnB,ICoLA,EDrKaS,EAAoBC,YAE/B,OAjBkBA,YAYlB,OAXoBC,OAAA,gBAA0B,mCAAC,EAAD,YAS5C,OARgBA,OAAA,gBAA0B,mCAAC,EAAD,YAMxC,OALY,8BAAH,IAEPC,SAFU,EAGVC,OAAQA,UAMd,OAIqBC,CAArB,GACO,QAAoB,cACV,MAAXC,EAAJ,KACE,UAAAA,EAAA,8BAAoBC,YAClBC,KAAWA,MAAXA,GACAA,iBAGFA,EAAG,IAAUA,EAAG,KAAhBA,GACAA,EAAG,IAAHA,SAEF,WAVF,KAyCWC,EAAe,SAACC,EAAD,GAC1B,IAAMC,EAAYD,QAAlB,KACME,EAAaD,EAAnB,GACME,EAAeF,EAArB,GAEA,OADkBG,KAAlB,I,SEvDsBC,E,GAAU,IAAEC,EAAF,EAAEA,MAClC,OACE,yBAAKjE,UAAU,YAAYkE,GAAG,aAC3BD,EAAA,KAAU,gBAAC,EAAD,EAAC,QAAWE,EAAZ,EAAYA,QACfD,EAAKE,IACX,OACE,yBAAKpE,UAAU,iBAAiBU,IAAKwD,GACnC,wBAAIlE,UAAU,mBAAmBkE,GAAIA,GACnC,4BACElE,UAAU,6BACVY,KAAK,S,iBACU,W,oCACasD,G,gBACd,O,kCACYA,IARhC,IAaE,yBACEA,GAAE,kBAAaA,GACflE,UAAU,8B,mCACiBkE,G,iBACZ,cAEf,yBAAKlE,UAAU,kBApBrB,UDwKR,SAAYqE,GACVA,aACAA,iBACAA,gBACAA,kBACAA,oBALF,CAAYA,MAAZ,K,kGE3KwBC,E,GAAW,2CAIjCC,EAJiC,EAIjCA,QAEMC,EAAkBC,EAAa,YAAcJ,EAAnD,GACA,OACE,yBACErE,UACEyE,EAAU,sDACyCC,EADzC,KAEN,IAGN,0BACE1E,UAAS,4CAAuCwE,EAAvC,sBACPE,EADO,YACeD,EAAaC,EAAoB,KAT7D,GAaE,0BAAM1E,UAAU,+BAblB,GAcEQ,+BAfJ,I,mDCXsBmE,E,GAAS,qBAE/BC,iBAF+B,SAI/B,SAEI,0BAAM5E,UAAU,uBAAhB,OAEE,0BAAMA,UAAW0E,GAAjB,IACIE,EAAY,YAJpB,OAQY,K,SCXQC,E,GAAW,IAAEC,EAAF,EAAEA,WACnC,SAKE,6BACEtE,4BADF,cAEE,2BAAOR,UAAU,6BACfQ,+BACEA,4BACE,wBAAIJ,MAAM,OACRI,+BAFJA,SAIEA,4BACEA,+BAPR,kBAWE,sCACGsE,QADH,IACGA,OADH,EACGA,EAAA,KAAiBC,Y,UACVC,EAAN,UAAyBD,cACzB,OACE,wBAAIrE,IAAK0D,KACP,4BACE,0BAAMpE,UAAU,WAAW+E,EAD7B,MAEE,qBAAUE,SAAUF,EAAEE,WACtBzE,uBAHF,MAIE,2BACER,UAAU,iBACVkF,MAAO,CAAEC,cAAF,GAAsBC,SAAU,KAEtCL,SAJH,KAKGC,GAAWD,SAAXC,iBACOD,eADPC,UATL,MAaExE,uBAbF,MAcE,2BAAOR,UAAU,cAAjB,IAAgC+E,EAAhC,GAfJ,MAiBEvE,4BACEA,+BAAQuE,EADVvE,aAEGuE,wBACC,8BACEvE,uBADF,MAEE,2BAAOR,UAAU,cAAjB,kBACkB+E,SANxBvE,UAUGwE,IAAO,OAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAJ,+BAAIA,EAAJ,0BAAIA,EAAXC,UACC,8BACExE,uBADF,MAEE,2BAAOR,UAAU,cAAjB,kBACkB+E,eAHpB,SAKEvE,uBALF,MAME,2BAAOR,UAAU,cAAjB,kCAEG+E,eAFH,yBAEGA,OAA0BM,YAAD,OAAzBN,UArCb,gBApBR,K,SCKoBO,E,GAAW,+CAIjCC,eAJiC,MAIvB,GAJuB,EAM3BP,EAAN,UAAyBpE,EAyCnB4E,EAAcC,YAClB,iBAAIA,EACK,CACLC,MADK,IAELC,IAAK,KAGT,UAAIF,EACK,CACLC,MADK,IAELC,IAAK,KAGF,CACLD,MADK,GAELC,IAAK,KAIT,OACE,8BACGH,KADH,MAEGA,KAFH,MAGE,yBAAKxF,UAAS,aAAQgF,EAAU,IAAM,MACnCY,GACCzC,OAAA,gBACE,qCAAC,EAAD,YACQ0C,EACJC,SAAkBA,EAAlBA,MAAmCA,EADrC,WAEMC,EAASC,IAAU7C,sBAAzB,EACA,KAAyB,CACvB,IAAM8C,EAtEGH,Y,QACrB,UAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAJ,oBAAIA,EAAJ,KAA2B,CACzB,IAAMI,EAAYxC,EAAaoC,QAAD,KAA9B,GACA,MAAO,CACLF,WAAYM,EADP,WAELX,QAASW,EAAUtF,MAGvB,UAAIkF,QAAJ,IAAIA,KAAJ,KAAoB,CAClB,IAAMI,EAAYxC,EAAaoC,EAAD,KAA9B,GACA,MAAO,CACLF,WAAYM,EADP,WAELX,QAASW,EAAUtF,MAGvB,cAAIkF,QAAJ,IAAIA,GAAJ,UAAIA,EAAJ,oBAAIA,EAAJ,WACS,CACLF,WAAYE,EAAS7B,OAGrB6B,EAAJ,WACS,CACLF,WAAYE,EAASF,iBAFzB,EAkD0BO,CAAd,GACA,OACE,yBAAKzF,IAAKM,GAAV,eAEE,qBACE4E,WAAU,OAAEK,QAAF,IAAEA,OAAF,EAAEA,EAAOL,WACnB7B,WAAYA,EACZnD,KAAMkF,EAASlF,KACf2E,QAASU,eAAK,IAALA,aAAiBA,EAAjBA,QAAiC,MAE1CF,GATN,KAaF,OAzDiB,SAAC/E,EAAD,KAC3B,OACE,yBAAKN,IAAKM,GACRR,6CAEEA,8BAFFA,IAGIuF,GALR,MAwDiBK,CAAqB,ENpETrB,YAC/B,IAAMsB,EAAc,CAAEvG,MAAO,WAC7B,oBAAIiF,SACK,0BAAMG,MAAOmB,GAAb,KAA4B,IAAIC,MAAhC,cAAP,KAEF,WAAIvB,OACK,0BAAMG,MAAOmB,GAAb,IAA4BtB,WAA5B,SAAP,KAEEA,oBAAJ,WAA4BA,OACnB,0BAAM/E,UAAU,eAAe+E,EAAtC,SAAsCA,KAExC,YAAIA,OACK,0BAAM/E,UAAU,gBAAvB,QAEE+E,EAAJ,OACS,0BAAMG,MAAOmB,GAActB,EAAlC,QAEK,0BAAMG,MAAOmB,GAActB,EAAlC,MMqDcwB,CAFyB,GAA3B,OAQPf,KAjCH,IAkCGA,KAnCL,K,SCvEsBgB,E,GAAQ,I,EAAA,YAAWzC,EAAX,EAAWA,WACnC0C,EAAM,OAAGtC,QAAH,IAAGA,GAAH,UAAGA,EAAUhB,eAAb,wBAAGgB,EAAf,OACA,MACE,YA4DF,OACE,yBAAKnE,UAAU,0BAA0BkF,MAAO,CAAEE,SAAU,KAC1D,yBAAKpF,UAAU,aACb,yBAAKA,UAAU,kBA5CK,WAExB,GAAIyG,EAAM,KAAU,OACZP,EAAYxC,EAAa+C,EAAM,KAArC,GACMR,EApBaQ,YAKrB,OAAIA,EAAJ,WACSA,EAAP,WAEEA,EAAJ,MACqBA,aACf/C,EAAa+C,aADEA,GAEfA,QAFJ,gBADF,EAYgBN,CAAd,GACMvF,EAAO6F,OAAcA,EAAdA,KAA4BP,EAAzC,KACMX,EAAO,OAAGW,QAAH,IAAGA,GAAH,UAAGA,EAAH,0BAAGA,EAAhB,KAEA,OACE,qBACEN,WAAYK,EACZrF,KAAMA,EACN2E,QAASA,EACTxB,WAAYA,IAMb,GAAI0C,SAAgBA,aAAsB,CAC7C,IAAMP,EAAYxC,EAAa+C,aAA/B,GACA,OACE,qBACEb,WAAYM,EAAUN,WACtBhF,KAAM6F,EAAO7F,KACb2E,QAASW,EAAUtF,KACnBmD,WAAYA,IAGX,OAAI0C,eAAsBA,EAA1B,MAEH,qBACEb,WAAYa,EAAOb,WACnBhF,KAAK,SACLmD,WAAYA,IAIXvD,2BAAIiG,EAAX,MAMqCC,M,SChEjBC,E,GAAY,oBAElC5C,EAFkC,EAElCA,WAEA,SAKE,yBAAK/D,UAAU,QACb,4CACe,qBAAUiF,SAAU2B,EAAY3B,YAE/CzE,2BAAIoG,EAJN,aAME,4BAAQ5G,UAAU,oBACfmD,sBAAeyD,QAAfzD,IAAeyD,OAAfzD,EAAeyD,EAAfzD,cAAyC,6CACxC,4BAAQzC,IAAKmG,EAAOC,MAAOD,GARjC,OAaE,yBAAK7G,UAAU,kBACb,yBAAKA,UAAU,aACb,qBAASmE,QAASyC,EAAYzC,QAASJ,WAAYA,OAnBzD,K,SCJoBgD,E,GAAU,kBAAahD,EAAb,EAAaA,WAC7C,SAKE,6BACEvD,4BADF,aAEE,2BAAOR,UAAU,6BACfQ,+BACEA,4BACE,wBAAIJ,MAAM,OACRI,+BAFJA,SAIEA,4BACEA,+BAPR,kBAWE,+BACG2C,OAAA,gBACC,mCAAC,EAAD,YACE,OACE,wBAAIzC,IAAK0D,KACP5D,4BACE,0BAAMR,UAAU,WAFpB,IAIE,4BACEQ,+BAAQwG,EADV,aAEE,qBACE7C,QAAS6C,EAAS7C,QAClBJ,WAAYA,YA7B9B,K,SCIoBkD,E,GAAY,gEAKlClD,EALkC,EAKlCA,WAEMmD,EAAuC,CAC3CC,QAAS1C,EAAa,MAAQ,KAGhC,OACE,yBAAKS,MAAOgC,GACV,qBAAYpC,WAAYA,IACxB,qBAAa8B,YAAaA,EAAa7C,WAAYA,IACnD,qBAAWqD,UAAWA,EAAWrD,WAAYA,K,SCd3BsD,E,GAAM,uBAAetD,EAAf,EAAeA,WACrCuD,EAAcrE,EAApB,GAEA,OACE,6BACGE,OAAA,gBACC,mCAAC,EAAD,YACQK,EXKM,SAAC+D,EAAD,GACpB,KACE,OAAOC,QAAWC,YAAD,OAAOA,SAAxB,KWPmCC,CAAOH,EAApC,GACA,OACE,yBAAK7G,IAAK0D,IAAUpE,UAAU,aAC5BQ,4BADF,GAEGgH,KAAchH,2BAAIgD,EAAlBgE,aAFH,KAGE,qBACEvD,MAAO0D,EAAA,KAAgBtC,YACrB,MAAO,CACLuC,QACE,qBACEnD,WAAYY,EAAKZ,WACjBpB,OAAQgC,EAAKhC,OACbkB,QAASc,EAAKd,QACdnB,SAAUiC,EAAKjC,WAGnBe,QACE,qBACEM,WAAYY,EAAKZ,WACjB2C,UAAW/B,EAAK+B,UAChBtC,WAAYO,EAAKP,WACjB8B,YAAavB,EAAKuB,YAClB7C,WAAYA,e,qDChCZ8D,E,GAAW,IAAE9D,EAAF,EAAEA,WACnC,SAKE,6BACGA,WACC,yBAAK/D,UAAU,aACbQ,4BADF,WAEE,qBACEyD,MAAOd,OAAA,QAAeY,EAAf,cACL,gB,EAAA,mBAAC,EAAD,YACQ6B,EACJa,yBAAqBA,EAArBA,0BAAqBA,EADvB,YAEMzB,IAAmByB,QAEzB,MAAO,CACLmB,QAAS,wBAAI5H,UAAU,QADlB,GAELmE,QACE,yBACEnE,UAAS,iCAA4B0E,IAEpCM,EAHH,SAIGY,GACCzC,OAAA,gBACE,gB,MAAA,mBAAC,EAAD,YAIE,OACE,yBAAKzC,IAAKoH,EAAc9H,UAAU,QAChC,0BAAMA,UAAU,qBADlB,GAIE,qBACEiF,SAAQ,UAAEwB,EAAF,6BAAEA,cAGV7B,WAAW,IARf,OAWE,0BAAM5E,UAAU,gBACb+H,6BAEK,UAAAA,EAAA,8CACAA,EADA,0BACAA,EAHLA,WAKGA,EAlBV,UAwBL/C,EAlCH,iBA2CbjB,mBACC,yBAAK/D,UAAU,aACbQ,4BADF,oBAEE,qBACEyD,MAAOd,OAAA,QAAeY,EAAf,sBACL,mCAAC,EAAD,YACE,MAAO,CACL6D,QACE,wBAAI5H,UAAU,QAAd,MACUgI,GAAkB,IAAJ,OAAQA,EAH7B,KAGqB,MAG1B7D,QACE,yBAAKzD,IAAKM,GACPgH,MACC,2BAAOhI,UAAU,WAAjB,OACOgI,EAHX,IAMGA,UACC,2BAAOhI,UAAU,WAAjB,WACWgI,EARf,QAWGA,eACC,2BAAOhI,UAAU,WAAjB,gBACgBgI,EAbpB,aAgBGA,QACC,2BAAOhI,UAAU,WAAjB,SACSgI,EAlBb,MAqBGA,SACC,6BACG7E,OAAA,QAAe6E,EAAf,YACC,mCAAC,EAAD,YACE,OACE,yBAAKtH,IAAKuH,GACR,2BAAOjI,UAAU,WACf,0BAAMA,UAAU,WADlB,gBADF,GAKGkI,oBACC,2BAAOlI,UAAU,WACf,0BAAMA,UAAU,WADlB,0BAIGkI,EAVP,kBAaE1H,uBAbF,MAcG0H,UACC/E,OAAA,QAAe+E,EAAf,aACE,mCAAC,EAAD,YACE,OACE,yBAAKxH,IAAKyH,GACR,2BAAOnI,UAAU,WAAjB,QAFJ,qBArHpC,K,SCToBoI,E,GAAgB,IACtCC,EADsC,EACtCA,cAEM,EAAN,EAAM,aAAN,EAAM,OAAN,EAAM,UAAN,EAAM,QAAN,EAAM,QAA6Cb,EAAnD,EAAmDA,KAEnD,OACE,6BACE,qBAAQrG,KAAMA,EAAMZ,QAASA,EAASW,eAAgBoH,IACtD,qBAAOpF,MAAOA,EAAOsE,KAAMA,EAAMzD,WAAYA,IAC7C,qBAAYA,WAAYA,K,kBCbe,IAAEsE,EAAF,EAAEA,cAC7C,OAAO,2BAAiBA,cAAeA,K,eCS1BE,EAZH,WACV,OACE,yBACErD,MAAO,CACLsD,QAAS,cAGX,kBAAC,EAAD,CAAiBH,cAAeI,MCPtCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7dd428cb.chunk.js","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import React from \"react\";\n\nconst icons = {\n  private: (\n    <path d='M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z' />\n  ),\n  copy: (\n    <path d='M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z' />\n  ),\n};\n\ntype IconProps = {\n  name: string;\n  color?: string;\n  size?: number;\n  className?: string;\n};\n\nexport default function Icon({\n  name,\n  color = \"#000000\",\n  size = 24,\n  className = \"\",\n}: IconProps) {\n  return (\n    <svg\n      fill={color}\n      viewBox='0 0 24 24'\n      xmlns='http://www.w3.org/2000/svg'\n      width={`${size}px`}\n      height={`${size}px`}\n      className={className}\n    >\n      {icons[name]}\n    </svg>\n  );\n}\n","import React from \"react\";\n\nimport { Servers as ServersModel } from \"models/OpenApi\";\nimport Icon from \"components/Icon\";\n\ntype ServersProps = {\n  servers: ServersModel;\n};\n\nexport default function Servers({ servers }: ServersProps) {\n  if (!servers) {\n    return null;\n  }\n  const handleClick = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  return (\n    <div>\n      <h6>Servers</h6>\n      <ul className='list-group'>\n        {servers.map((s) => (\n          <li\n            className='list-group-item d-flex justify-content-between align-items-center'\n            key={s.url}\n          >\n            <span>\n              {s.description && `${s.description}:`} {s.url}\n            </span>\n            <button\n              type='button'\n              className='btn btn-sm btn-primary'\n              onClick={() => handleClick(s.url)}\n            >\n              <Icon name='copy' color='white' size={18} />\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Info, Servers as ServersModel } from \"../../../models/OpenApi\";\nimport Servers from \"../Servers\";\n\ntype HeaderProps = {\n  info: Info;\n  servers: ServersModel;\n  openApiVersion: string;\n};\n\nexport default function Header({ info, servers, openApiVersion }: HeaderProps) {\n  return (\n    <div>\n      <div className='d-flex justify-content-between'>\n        <h1>{info.title}</h1>\n        <span>\n          <small className='badge bg-secondary'>Version: {info.version}</small>\n          <small className='ms-2 badge bg-success'>\n            OpenApi: {openApiVersion}\n          </small>\n        </span>\n      </div>\n      <p>{info.description}</p>\n      <div className='mt-2'>\n        <Servers servers={servers} />\n      </div>\n    </div>\n  );\n}\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React from \"react\";\nimport { Paths, Tags, Tag, Property, Components } from \"../../models/OpenApi\";\n\nconst unifyPaths = (paths: Paths) => {\n  const pathsMapped = Object.entries(paths).map(([pathname, https]) => {\n    const methods = Object.entries(https).map(([method, details]) => {\n      const obj = {\n        ...details,\n        pathname: pathname,\n        method: method,\n      };\n      return obj;\n    });\n    return methods;\n  });\n  return pathsMapped.flat();\n};\n\nexport const groupPathsByTags = (paths: Paths) => {\n  const unifiedPaths = unifyPaths(paths);\n  return unifiedPaths.reduce((acc, curr) => {\n    if (curr.tags) {\n      curr.tags?.forEach((tag) => {\n        acc[tag] = acc[tag] || [];\n        acc[tag].push(curr);\n      });\n    } else {\n      acc[\"all\"] = acc[\"all\"] || [];\n      acc[\"all\"].push(curr);\n    }\n    return acc;\n  }, {});\n};\n\nexport const getTag = (tagName: string, tags: Tags): Tag | undefined => {\n  if (tags) {\n    return tags.find((t) => t.name === tagName);\n  }\n  return undefined;\n};\n\nexport const getPropertyValue = (p: Property) => {\n  const stringStyle = { color: \"#00da91\" };\n  if (p.format === \"date-time\") {\n    return <span style={stringStyle}>\"{new Date().toISOString()}\"</span>;\n  }\n  if (p.type === \"string\") {\n    return <span style={stringStyle}>\"{p.example || \"string\"}\"</span>;\n  }\n  if (p.type === \"integer\" || p.type === \"number\") {\n    return <span className='text-danger'>{p.example || `0`}</span>;\n  }\n  if (p.type === \"boolean\") {\n    return <span className='text-warning'>true</span>;\n  }\n  if (p.format) {\n    return <span style={stringStyle}>{p.format}</span>;\n  }\n  return <span style={stringStyle}>{p.type}</span>;\n};\n\nexport const getComponent = (refPath: string, components: Components) => {\n  const splitPath = refPath.split(\"/\");\n  const schemaType = splitPath[2];\n  const schemaObject = splitPath[3];\n  const component = components[schemaType][schemaObject];\n  return component;\n};\n","export default interface OpenApi {\n  components: Components;\n  info: Info;\n  openapi: string;\n  paths: Paths;\n  servers: Servers;\n  tags: Tags;\n}\n\nexport type Components = {\n  schemas: any;\n  securitySchemes: any;\n};\n\nexport type Info = {\n  description: string;\n  title: string;\n  version: string;\n};\n\nexport interface Paths {\n  [key: string]: Path;\n}\n\ninterface Path {\n  [key: string]: Http;\n}\n\ntype Server = {\n  description: string;\n  url: string;\n};\n\nexport type Servers = Server[];\n\ntype Parameter = {\n  description?: string;\n  name: string;\n  required?: boolean;\n  schema: {\n    items?: {\n      default?: any;\n      enum?: string[];\n      type: string;\n    };\n    default?: any;\n    format: string;\n    type: string;\n  };\n  in: \"path\" | \"query\" | \"header\" | \"cookie\";\n  deprecated?: boolean;\n  allowEmptyValue?: boolean;\n};\n\nexport type Parameters = Parameter[];\n\nexport type Tag = {\n  description?: string;\n  externalDocs?: {\n    description: string;\n    url: string;\n  };\n  name: string;\n};\n\nexport type Tags = Tag[];\n\nexport interface Responses {\n  [key: string]: Response;\n}\n\ntype Response = {\n  description: string;\n  content: ResponseContent;\n};\n\ntype Http = {\n  description: string;\n  parameters: Parameters;\n  requestBody: RequestBody;\n  responses: Responses;\n  summary: string;\n  tags: string[];\n  deprecated?: boolean;\n};\n\nexport interface RequestBodySchemaProperties {\n  [key: string]: {\n    type: string;\n    description?: string;\n    example?: any;\n    format?: string;\n    enum?: string[];\n    $ref?: string;\n    items: any;\n    properties: any;\n  };\n}\n\nexport type Property = {\n  type: string;\n  properties?: any;\n  $ref?: string;\n  items?: {\n    type?: string;\n    $ref?: string;\n    properties?: any;\n  };\n  example?: any;\n  format?: any;\n};\n\nexport interface SchemaProperties {\n  [key: string]: {\n    type: string;\n    description?: string;\n    example?: any;\n    format?: string;\n    enum?: string[];\n    items: {\n      type?: string;\n      $ref?: string;\n      properties?: any;\n    };\n  };\n}\n\nexport type Schema = {\n  type: string;\n  properties: SchemaProperties;\n  required?: string[];\n  items: {\n    properties: SchemaProperties;\n  };\n};\n\nexport type SecuritySchema = {\n  in?: string;\n  description?: string;\n  name?: string;\n  type?: string;\n  flows?: any;\n  scheme?: string;\n};\n\nexport type Flow = {\n  authorizationUrl: string;\n  scopes: any;\n};\n\ninterface RequestBodyContent {\n  [key: string]: {\n    schema: {\n      items: any; // TODO: items\n      type: string;\n      $ref?: string;\n      properties?: RequestBodySchemaProperties;\n    };\n  };\n}\n\nexport interface ResponseContent extends RequestBodyContent {}\n\nexport type RequestBody = {\n  description: string;\n  content: RequestBodyContent;\n  required: boolean;\n};\n\n// UI\nexport interface UIHttp extends Http {\n  pathname: string;\n  method:\n    | \"get\"\n    | \"post\"\n    | \"put\"\n    | \"delete\"\n    | \"patch\"\n    | \"options\"\n    | \"head\"\n    | \"trace\";\n}\n\nexport enum MethodClassnames {\n  get = \"info\",\n  post = \"success\",\n  put = \"warning\",\n  delete = \"danger\",\n  patch = \"secondary\",\n}\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ntype AccordionProps = {\n  items: {\n    heading: any;\n    content: any;\n  }[];\n};\n\nexport default function Accordion({ items }: AccordionProps) {\n  return (\n    <div className='accordion' id='accordion'>\n      {items.map(({ heading, content }) => {\n        const id = uuidv4();\n        return (\n          <div className='accordion-item' key={id}>\n            <h2 className='accordion-header' id={id}>\n              <button\n                className='accordion-button collapsed'\n                type='button'\n                data-bs-toggle='collapse'\n                data-bs-target={`#collapse${id}`}\n                aria-expanded='true'\n                aria-controls={`collapse${id}`}\n              >\n                {heading}\n              </button>\n            </h2>\n            <div\n              id={`collapse${id}`}\n              className='accordion-collapse collapse'\n              aria-labelledby={`heading${id}`}\n              data-bs-parent='#accordion'\n            >\n              <div className='accordion-body'>{content}</div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { MethodClassnames } from \"models/OpenApi\";\n\nimport styles from \"./PathHeader.module.css\";\n\ntype PathHeaderProps = {\n  deprecated?: boolean;\n  method: string;\n  pathname: string;\n  summary: string;\n};\n\nexport default function PathHeader({\n  deprecated,\n  method,\n  pathname,\n  summary,\n}: PathHeaderProps) {\n  const backgroundClass = deprecated ? \"secondary\" : MethodClassnames[method];\n  return (\n    <div\n      className={\n        deprecated\n          ? `text-decoration-line-through text-secondary ${styles.deprecated} `\n          : \"\"\n      }\n    >\n      <span\n        className={`fs-6 me-3 badge text-uppercase bg-${backgroundClass} \n        ${styles.methodBadge} ${deprecated ? styles.deprecated : \"\"}`}\n      >\n        {method}\n      </span>\n      <span className='fw-bold font-monospace me-3'>{pathname}</span>\n      <small>{summary}</small>\n    </div>\n  );\n}\n","import React from \"react\";\nimport styles from \"./Required.module.css\";\n\ntype RequiredProps = {\n  required?: boolean;\n  showTitle?: boolean;\n};\n\nexport default function Required({\n  required,\n  showTitle = true,\n}: RequiredProps) {\n  if (required) {\n    return (\n      <span className='text-danger fw-bold'>\n        &nbsp;\n        <span className={styles.required}>\n          *{showTitle ? \" required\" : null}\n        </span>\n      </span>\n    );\n  } else return null;\n}\n","import React from \"react\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Parameters as ParametersModel } from \"models/OpenApi\";\nimport Required from \"components/OpenApiRenderer/Required\";\n\ntype ParametersProps = {\n  parameters: ParametersModel;\n};\n\nexport default function Parameters({ parameters }: ParametersProps) {\n  if (!parameters) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h6>Parameters</h6>\n      <table className='table table-bordered mt-3'>\n        <thead>\n          <tr>\n            <td width='150'>\n              <small>Name</small>\n            </td>\n            <td>\n              <small>Description</small>\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          {parameters?.map((p) => {\n            const isArray: boolean = p.schema.type === \"array\";\n            return (\n              <tr key={uuidv4()}>\n                <td>\n                  <span className='fw-bold'>{p.name}</span>\n                  <Required required={p.required} />\n                  <br />\n                  <small\n                    className='font-monospace'\n                    style={{ letterSpacing: 0.5, fontSize: 12 }}\n                  >\n                    {p.schema.type}\n                    {isArray && p.schema.items\n                      ? `[${p.schema.items.type}]`\n                      : null}\n                  </small>\n                  <br />\n                  <small className='fst-italic'>({p.in})</small>\n                </td>\n                <td>\n                  <small>{p.description}</small>\n                  {p.schema.default != null && (\n                    <span>\n                      <br />\n                      <small className='fst-italic'>\n                        Default value: {p.schema.default}\n                      </small>\n                    </span>\n                  )}\n                  {isArray && p?.schema?.items?.default && (\n                    <span>\n                      <br />\n                      <small className='fst-italic'>\n                        Default value: {p.schema.items.default}\n                      </small>\n                      <br />\n                      <small className='fst-italic'>\n                        Available values:&nbsp;\n                        {p.schema.items.enum?.map((item) => item).join(\", \")}\n                      </small>\n                    </span>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport {\n  Components as ComponentsModel,\n  RequestBodySchemaProperties,\n  Property,\n} from \"models/OpenApi\";\n\nimport { getPropertyValue, getComponent } from \"../utils\";\n\ntype PropertiesProps = {\n  properties: RequestBodySchemaProperties;\n  components: ComponentsModel;\n  type: string;\n  subType?: string;\n};\n\nexport default function Properties({\n  properties,\n  components,\n  type,\n  subType = \"\",\n}: PropertiesProps) {\n  const isArray: boolean = type === \"array\";\n\n  const getProperties = (property: Property): any => {\n    if (property?.items?.$ref) {\n      const component = getComponent(property.items.$ref, components);\n      return {\n        properties: component.properties,\n        subType: component.type,\n      };\n    }\n    if (property?.$ref) {\n      const component = getComponent(property.$ref, components);\n      return {\n        properties: component.properties,\n        subType: component.type,\n      };\n    }\n    if (property?.items?.properties) {\n      return {\n        properties: property.items,\n      };\n    }\n    if (property.properties) {\n      return {\n        properties: property.properties,\n      };\n    }\n  };\n\n  const renderSimpleProperty = (name: string, value: any, isLast: boolean) => {\n    return (\n      <div key={name}>\n        <span>\n          \"{name}\":&nbsp;\n          <span>{value}</span>\n          {!isLast && \",\"}\n        </span>\n      </div>\n    );\n  };\n\n  const getBracket = (propertyType: string): { start: string; end: string } => {\n    if (propertyType === \"object\") {\n      return {\n        start: \"{\",\n        end: \"}\",\n      };\n    }\n    if (propertyType === \"array\") {\n      return {\n        start: \"[\",\n        end: \"]\",\n      };\n    }\n    return {\n      start: \"\",\n      end: \"\",\n    };\n  };\n\n  return (\n    <span>\n      {getBracket(type).start}\n      {getBracket(subType).start}\n      <div className={`ms-${isArray ? \"4\" : \"2\"}`}>\n        {properties &&\n          Object.entries(properties).map(\n            ([name, property]: [string, Property], index) => {\n              const isCompositeProperty: boolean =\n                property.items || property.$ref || property.properties;\n              const isLast = index === Object.keys(properties).length - 1;\n              if (isCompositeProperty) {\n                const props = getProperties(property);\n                return (\n                  <div key={name}>\n                    \"{name}\":&nbsp;\n                    <Properties\n                      properties={props?.properties}\n                      components={components}\n                      type={property.type}\n                      subType={props?.subType ? props.subType : \"\"}\n                    />\n                    {!isLast && \",\"}\n                  </div>\n                );\n              }\n              return renderSimpleProperty(\n                name,\n                getPropertyValue(property),\n                isLast\n              );\n            }\n          )}\n      </div>\n      {getBracket(subType).end}\n      {getBracket(type).end}\n    </span>\n  );\n}\n","import React from \"react\";\n\nimport { getComponent } from \"../utils\";\nimport { Components as ComponentsModel, ResponseContent } from \"models/OpenApi\";\n\ntype ContentProps = {\n  content: ResponseContent;\n  components: ComponentsModel;\n};\n\nimport Properties from \"components/OpenApiRenderer/Properties\";\n\nexport default function Content({ content, components }: ContentProps) {\n  const schema = content?.[Object.keys(content)[0]]?.schema;\n  if (!schema) {\n    return null;\n  }\n\n  const getProperties = (schema: {\n    type: string;\n    properties: any;\n    items: any;\n  }) => {\n    if (schema.properties) {\n      return schema.properties;\n    }\n    if (schema.items) {\n      const properties = schema.items[\"$ref\"]\n        ? getComponent(schema.items[\"$ref\"], components)\n        : schema.items.properties;\n      return properties;\n    }\n  };\n\n  const renderCardContent = () => {\n    // Case 1 - $ref\n    if (schema[\"$ref\"]) {\n      const component = getComponent(schema[\"$ref\"], components);\n      const props = getProperties(component);\n      const type = schema.type ? schema.type : component.type;\n      const subType = component?.items?.type;\n\n      return (\n        <Properties\n          properties={props}\n          type={type}\n          subType={subType}\n          components={components}\n        />\n      );\n    }\n    // Case 2 - items (object / array)\n    // TODO: items not ref, but { type:  string }\n    else if (schema.items && schema.items[\"$ref\"]) {\n      const component = getComponent(schema.items[\"$ref\"], components);\n      return (\n        <Properties\n          properties={component.properties}\n          type={schema.type}\n          subType={component.type}\n          components={components}\n        />\n      );\n    } else if (schema.properties && !schema.items) {\n      return (\n        <Properties\n          properties={schema.properties}\n          type='object'\n          components={components}\n        />\n      );\n    }\n    return <p>{schema.type}</p>;\n  };\n\n  return (\n    <div className='card bg-dark text-light' style={{ fontSize: 12 }}>\n      <div className='card-body'>\n        <div className='font-monospace'>{renderCardContent()}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport {\n  RequestBody as RequestBodyModel,\n  Components as ComponentsModel,\n} from \"models/OpenApi\";\nimport Required from \"components/OpenApiRenderer/Required\";\nimport Content from \"components/OpenApiRenderer/Content\";\n\ntype RequestBodyProps = {\n  requestBody: RequestBodyModel;\n  components: ComponentsModel;\n};\n\nexport default function RequestBody({\n  requestBody,\n  components,\n}: RequestBodyProps) {\n  if (!requestBody) {\n    return null;\n  }\n\n  return (\n    <div className='mb-3'>\n      <h6>\n        Request Body <Required required={requestBody.required} />\n      </h6>\n      <p>{requestBody.description}</p>\n      {/* TODO: Render based on schemas & media types */}\n      <select className='form-select mt-3'>\n        {Object.entries(requestBody?.content).map(([title]) => (\n          <option key={title} value={title}>\n            {title}\n          </option>\n        ))}\n      </select>\n      <div className='card mt-2 mb-2'>\n        <div className='card-body'>\n          <Content content={requestBody.content} components={components} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  Responses as ResponsesModel,\n  Components as ComponentsModel,\n} from \"models/OpenApi\";\n\nimport Content from \"components/OpenApiRenderer/Content\";\n\ntype ResponsesProps = {\n  responses: ResponsesModel;\n  components: ComponentsModel;\n};\n\nexport default function Responses({ responses, components }: ResponsesProps) {\n  if (!responses) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h6>Responses</h6>\n      <table className='table table-bordered mt-3'>\n        <thead>\n          <tr>\n            <td width='150'>\n              <small>Code</small>\n            </td>\n            <td>\n              <small>Description</small>\n            </td>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(responses).map(\n            ([responseCode, response]: [string, any]) => {\n              return (\n                <tr key={uuidv4()}>\n                  <td>\n                    <span className='fw-bold'>{responseCode}</span>\n                  </td>\n                  <td>\n                    <small>{response.description}</small>\n                    <Content\n                      content={response.content}\n                      components={components}\n                    />\n                  </td>\n                </tr>\n              );\n            }\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport {\n  Responses as ResponsesModel,\n  Parameters as ParametersModel,\n  Components as ComponentsModel,\n  RequestBody as RequestBodyModel,\n} from \"models/OpenApi\";\n\nimport Parameters from \"./Parameters\";\nimport RequestBody from \"./RequestBody\";\nimport Responses from \"./Responses\";\n\ntype PathContentProps = {\n  deprecated?: boolean;\n  responses: ResponsesModel;\n  parameters: ParametersModel;\n  requestBody: RequestBodyModel;\n  components: ComponentsModel;\n};\n\nexport default function PathContent({\n  deprecated,\n  responses,\n  parameters,\n  requestBody,\n  components,\n}: PathContentProps) {\n  const deprecatedStyle: { opacity: string } = {\n    opacity: deprecated ? \"0.5\" : \"1\",\n  };\n\n  return (\n    <div style={deprecatedStyle}>\n      <Parameters parameters={parameters} />\n      <RequestBody requestBody={requestBody} components={components} />\n      <Responses responses={responses} components={components} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport {\n  Paths as PathsModel,\n  Tags as TagsModel,\n  Components as ComponentsModel,\n  UIHttp,\n  Tag,\n} from \"models/OpenApi\";\nimport { groupPathsByTags, getTag } from \"../utils\";\n\nimport Accordion from \"components/Accordion\";\nimport PathHeader from \"../PathHeader\";\nimport PathContent from \"../PathContent\";\n\ntype PathsProps = {\n  paths: PathsModel;\n  tags: TagsModel;\n  components: ComponentsModel;\n};\n\nexport default function Paths({ paths, tags, components }: PathsProps) {\n  const pathsByTags = groupPathsByTags(paths);\n\n  return (\n    <div>\n      {Object.entries(pathsByTags).map(\n        ([tagName, pathGroups]: [string, UIHttp[]]) => {\n          const tag: Tag | undefined = getTag(tagName, tags);\n          return (\n            <div key={uuidv4()} className='mb-4 mt-4'>\n              <h1>{tagName}</h1>\n              {tags && tag ? <p>{tag.description}</p> : null}\n              <Accordion\n                items={pathGroups.map((item: UIHttp) => {\n                  return {\n                    heading: (\n                      <PathHeader\n                        deprecated={item.deprecated}\n                        method={item.method}\n                        summary={item.summary}\n                        pathname={item.pathname}\n                      />\n                    ),\n                    content: (\n                      <PathContent\n                        deprecated={item.deprecated}\n                        responses={item.responses}\n                        parameters={item.parameters}\n                        requestBody={item.requestBody}\n                        components={components}\n                      />\n                    ),\n                  };\n                })}\n              />\n            </div>\n          );\n        }\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Components as ComponentsModel,\n  Schema,\n  SecuritySchema,\n  SchemaProperties,\n  Flow,\n  Property,\n} from \"models/OpenApi\";\n\nimport Accordion from \"components/Accordion\";\nimport Required from \"components/OpenApiRenderer/Required\";\n\nimport styles from \"./Components.module.css\";\n\ntype ComponentsProps = {\n  components: ComponentsModel;\n};\n\nexport default function Components({ components }: ComponentsProps) {\n  if (!components) {\n    return null;\n  }\n\n  return (\n    <div>\n      {components.schemas && (\n        <div className='mb-4 mt-4'>\n          <h2>Schemas</h2>\n          <Accordion\n            items={Object.entries(components.schemas).map(\n              ([name, schema]: [string, Schema]) => {\n                const properties: SchemaProperties =\n                  schema.properties || schema.items?.properties;\n                const isArray: boolean = schema.items ? true : false;\n\n                return {\n                  heading: <h6 className='mb-0'>{name}</h6>,\n                  content: (\n                    <div\n                      className={`font-monospace d-block ${styles.property}`}\n                    >\n                      {isArray ? `[{` : `{`}\n                      {properties &&\n                        Object.entries(properties).map(\n                          ([propertyName, propertyInfo]: [\n                            string,\n                            Property\n                          ]) => {\n                            return (\n                              <div key={propertyName} className='ms-3'>\n                                <span className='fw-bold text-dark'>\n                                  {propertyName}\n                                </span>\n                                <Required\n                                  required={schema.required?.includes(\n                                    propertyName\n                                  )}\n                                  showTitle={false}\n                                />\n                                &nbsp;\n                                <span className='text-primary'>\n                                  {propertyInfo.type === \"array\"\n                                    ? `[${\n                                        propertyInfo.items?.type ||\n                                        propertyInfo.items?.$ref\n                                      }]`\n                                    : propertyInfo.type}\n                                </span>\n                              </div>\n                            );\n                          }\n                        )}\n                      {isArray ? `}]` : `}`}\n                    </div>\n                  ),\n                };\n              }\n            )}\n          />\n        </div>\n      )}\n      {components.securitySchemes && (\n        <div className='mb-4 mt-4'>\n          <h2>Security Schemas</h2>\n          <Accordion\n            items={Object.entries(components.securitySchemes).map(\n              ([name, securitySchema]: [string, SecuritySchema]) => {\n                return {\n                  heading: (\n                    <h6 className='mb-0'>\n                      {name} {securitySchema && `(${securitySchema.type})`}\n                    </h6>\n                  ),\n                  content: (\n                    <div key={name}>\n                      {securitySchema.in && (\n                        <small className='d-block'>\n                          In: {securitySchema.in}\n                        </small>\n                      )}\n                      {securitySchema.scheme && (\n                        <small className='d-block'>\n                          Scheme: {securitySchema.scheme}\n                        </small>\n                      )}\n                      {securitySchema.description && (\n                        <small className='d-block'>\n                          Description: {securitySchema.description}\n                        </small>\n                      )}\n                      {securitySchema.name && (\n                        <small className='d-block'>\n                          Name: {securitySchema.name}\n                        </small>\n                      )}\n                      {securitySchema.flows && (\n                        <div>\n                          {Object.entries(securitySchema.flows).map(\n                            ([flowName, flow]: [string, Flow]) => {\n                              return (\n                                <div key={flowName}>\n                                  <small className='d-block'>\n                                    <span className='fw-bold'>Flow:</span>&nbsp;\n                                    {flowName}\n                                  </small>\n                                  {flow.authorizationUrl && (\n                                    <small className='d-block'>\n                                      <span className='fw-bold'>\n                                        Authorization URL:&nbsp;\n                                      </span>\n                                      {flow.authorizationUrl}\n                                    </small>\n                                  )}\n                                  <hr />\n                                  {flow.scopes &&\n                                    Object.entries(flow.scopes).map(\n                                      ([scopeName, scope]) => {\n                                        return (\n                                          <div key={scopeName}>\n                                            <small className='d-block'>\n                                              {scopeName} - {scope}\n                                            </small>\n                                          </div>\n                                        );\n                                      }\n                                    )}\n                                </div>\n                              );\n                            }\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  ),\n                };\n              }\n            )}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Header from \"./Header\";\nimport Paths from \"./Paths\";\nimport Components from \"./Components\";\n\nimport OpenApi from \"models/OpenApi\";\n\ntype OpenApiRendererProps = {\n  specification: OpenApi;\n};\n\nexport default function OpenApiRenderer({\n  specification,\n}: OpenApiRendererProps) {\n  const { components, info, openapi, paths, servers, tags } = specification;\n\n  return (\n    <div>\n      <Header info={info} servers={servers} openApiVersion={openapi} />\n      <Paths paths={paths} tags={tags} components={components} />\n      <Components components={components} />\n    </div>\n  );\n}\n","import * as React from \"react\";\n\nimport OpenApiRenderer from \"./components/OpenApiRenderer\";\n\ninterface Props {\n  specification: any;\n}\n\nexport default function ReactOpenApiRenderer({ specification }: Props) {\n  return <OpenApiRenderer specification={specification} />;\n}\n","import React from \"react\";\n\nimport OpenApiRenderer from \"@tx-dts/react-openapi-renderer\";\nimport \"@tx-dts/react-openapi-renderer/dist/index.css\";\nimport specificationMock from \"./example.json\";\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        padding: \"2rem 7rem\",\n      }}\n    >\n      <OpenApiRenderer specification={specificationMock} />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}